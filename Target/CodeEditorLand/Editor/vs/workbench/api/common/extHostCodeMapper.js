import"../../../base/common/cancellation.js";import"../../../platform/extensions/common/extensions.js";import"../../contrib/chat/common/chatCodeMapperService.js";import*as n from"./extHost.protocol.js";import{TextEdit as c}from"./extHostTypeConverters.js";import{URI as v}from"../../../base/common/uri.js";class i{static _providerHandlePool=0;_proxy;providers=new Map;constructor(e){this._proxy=e.getProxy(n.MainContext.MainThreadCodeMapper)}async $mapCode(e,o,r){const p=this.providers.get(e);if(!p)throw new Error(`Received request to map code for unknown provider handle ${e}`);const d={textEdit:(s,t)=>{t=Array.isArray(t)?t:[t],this._proxy.$handleProgress(o.requestId,{uri:s,edits:t.map(c.from)})}},a={codeBlocks:o.codeBlocks.map(s=>({code:s.code,resource:v.revive(s.resource)})),conversation:o.conversation};return await p.provideMappedEdits(a,d,r)??null}registerMappedEditsProvider(e,o){const r=i._providerHandlePool++;return this._proxy.$registerCodeMapperProvider(r),this.providers.set(r,o),{dispose:()=>this._proxy.$unregisterCodeMapperProvider(r)}}}export{i as ExtHostCodeMapper};
