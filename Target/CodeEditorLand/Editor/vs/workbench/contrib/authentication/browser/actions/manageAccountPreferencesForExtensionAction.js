var I=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var k=(o,t,c,i)=>{for(var e=i>1?void 0:i?P(t,c):t,n=o.length-1,r;n>=0;n--)(r=o[n])&&(e=(i?r(t,c,e):r(e))||e);return i&&e&&I(t,c,e),e},s=(o,t)=>(c,i)=>t(c,i,o);import{Event as S}from"../../../../../base/common/event.js";import{DisposableStore as _}from"../../../../../base/common/lifecycle.js";import{localize as a,localize2 as f}from"../../../../../nls.js";import{Action2 as y}from"../../../../../platform/actions/common/actions.js";import{IInstantiationService as Q}from"../../../../../platform/instantiation/common/instantiation.js";import{IQuickInputService as b}from"../../../../../platform/quickinput/common/quickInput.js";import{IAuthenticationUsageService as w}from"../../../../services/authentication/browser/authenticationUsageService.js";import{IAuthenticationExtensionsService as x,IAuthenticationService as E}from"../../../../services/authentication/common/authentication.js";import{IExtensionService as N}from"../../../../services/extensions/common/extensions.js";class K extends y{constructor(){super({id:"_manageAccountPreferencesForExtension",title:f("manageAccountPreferenceForExtension","Manage Extension Account Preferences"),category:f("accounts","Accounts"),f1:!1})}run(t,c,i){return t.get(Q).createInstance(h).run(c,i)}}let h=class{constructor(t,c,i,e,n){this._authenticationService=t;this._quickInputService=c;this._authenticationUsageService=i;this._authenticationExtensionsService=e;this._extensionService=n}async run(t,c){if(!t)return;const i=await this._extensionService.getExtension(t);if(!i)throw new Error(`No extension with id ${t}`);const e=new Array,n=new Map;if(c)e.push(c),n.set(c,await this._authenticationService.getAccounts(c));else for(const u of this._authenticationService.getProviderIds()){const l=await this._authenticationService.getAccounts(u);for(const g of l)if(this._authenticationUsageService.readAccountUsages(u,g.label).find(m=>m.extensionId===t.toLowerCase())){e.push(u),n.set(u,l);break}}let r=e[0];if(e.length>1&&(r=(await this._quickInputService.pick(e.map(l=>({label:this._authenticationService.getProvider(l).label,id:l})),{placeHolder:a("selectProvider","Select an authentication provider to manage account preferences for"),title:a("pickAProviderTitle","Manage Extension Account Preferences")}))?.id),!r)return;const A=this._authenticationExtensionsService.getAccountPreference(t,r),d=this._getItems(n.get(r),r,A),v=new _,p=this._createQuickPick(v,t,i.displayName??i.name);if(d.length===0){v.add(this._handleNoAccounts(p));return}p.items=d,p.show()}_createQuickPick(t,c,i){const e=t.add(this._quickInputService.createQuickPick({useSeparators:!0}));return t.add(e.onDidHide(()=>{t.dispose()})),e.placeholder=a("placeholder","Manage '{0}' account preferences...",i),e.title=a("title","'{0}' Account Preferences For This Workspace",i),e.sortByLabel=!1,t.add(e.onDidAccept(()=>{this._accept(c,e.selectedItems),e.hide()})),e}_getItems(t,c,i){return t.map(e=>i===e.label?{label:e.label,account:e,providerId:c,description:a("currentAccount","Current account"),picked:!0}:{label:e.label,account:e,providerId:c})}_handleNoAccounts(t){return t.validationMessage=a("noAccounts","No accounts are currently used by this extension."),t.buttons=[this._quickInputService.backButton],t.show(),S.filter(t.onDidTriggerButton,c=>c===this._quickInputService.backButton)(()=>this.run())}_accept(t,c){for(const i of c){const e=i.account,n=i.providerId;this._authenticationExtensionsService.getAccountPreference(t,n)!==e.label&&this._authenticationExtensionsService.updateAccountPreference(t,n,e)}}};h=k([s(0,E),s(1,b),s(2,w),s(3,x),s(4,N)],h);export{K as ManageAccountPreferencesForExtensionAction};
