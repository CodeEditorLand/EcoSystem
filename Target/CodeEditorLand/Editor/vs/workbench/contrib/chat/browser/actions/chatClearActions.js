import{Codicon as l}from"../../../../../base/common/codicons.js";import{KeyCode as f,KeyMod as I}from"../../../../../base/common/keyCodes.js";import"../../../../../editor/browser/editorExtensions.js";import{localize2 as d}from"../../../../../nls.js";import{AccessibilitySignal as b,IAccessibilitySignalService as u}from"../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js";import{Action2 as w,MenuId as n,registerAction2 as C}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as r}from"../../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as N}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{ActiveEditorContext as x}from"../../../../common/contextkeys.js";import{CHAT_CATEGORY as m,isChatViewTitleActionContext as T}from"./chatActions.js";import{clearChatEditor as D}from"./chatClear.js";import{CHAT_VIEW_ID as E,EDITS_VIEW_ID as S,IChatWidgetService as v}from"../chat.js";import{ChatEditorInput as O}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_IN_CHAT_SESSION as W,CONTEXT_CHAT_ENABLED as h,CONTEXT_CHAT_EDITING_PARTICIPANT_REGISTERED as y,CONTEXT_CHAT_EDITING_ENABLED as G}from"../../common/chatContextKeys.js";import{IViewsService as A}from"../../../../services/views/common/viewsService.js";import{ChatAgentLocation as H}from"../../common/chatAgents.js";import{ChatContextAttachments as _}from"../contrib/chatContextAttachments.js";const k="workbench.action.chat.newChat",K="workbench.action.chat.newEditSession";function st(){C(class extends w{constructor(){super({id:"workbench.action.chatEditor.newChat",title:d("chat.newChat.label","New Chat"),icon:l.plus,f1:!1,precondition:h,menu:[{id:n.EditorTitle,group:"navigation",order:0,when:x.isEqualTo(O.EditorID)}]})}async run(t,...a){s(t.get(u)),await D(t)}}),C(class extends w{constructor(){super({id:k,title:d("chat.newChat.label","New Chat"),category:m,icon:l.plus,precondition:h,f1:!0,keybinding:{weight:N.WorkbenchContrib,primary:I.CtrlCmd|f.KeyL,mac:{primary:I.WinCtrl|f.KeyL},when:W},menu:[{id:n.ChatContext,group:"z_clear"},{id:n.ViewTitle,when:r.equals("view",E),group:"navigation",order:-1}]})}async run(t,...a){const i=a[0],o=t.get(u);if(T(i))s(o),i.chatView.widget.clear(),i.chatView.widget.focusInput();else{const g=t.get(v),p=t.get(A);let e=g.lastFocusedWidget;e||(e=(await p.openView(E)).widget),s(o),e.clear(),e.focusInput()}}}),C(class extends w{constructor(){super({id:K,title:d("chat.newEdits.label","New Edit Session"),category:m,icon:l.plus,precondition:r.and(h,y),f1:!0,menu:[{id:n.ChatContext,group:"z_clear"},{id:n.ViewTitle,when:r.equals("view",S),group:"navigation",order:-1}]})}async run(t,...a){const i=a[0],o=t.get(u);if(T(i))s(o),i.chatView.widget.clear(),i.chatView.widget.getContrib(_.ID)?.setContext(!0),i.chatView.widget.focusInput();else{const g=t.get(v),p=t.get(A);let e=g.lastFocusedWidget;(!e||e.location!==H.EditingSession)&&(e=(await p.openView(S)).widget),s(o),e.clear(),e.getContrib(_.ID)?.setContext(!0),e.focusInput()}}}),C(class extends w{constructor(){super({id:"workbench.action.chat.openEditSession",title:d("chat.openEdits.label","Open Edit Session"),category:m,icon:l.edit,precondition:r.and(h,y),f1:!0,menu:[{id:n.ViewTitle,when:r.and(r.equals("view",E),G),group:"navigation",order:1}]})}async run(t,...a){(await t.get(A).openView(S)).widget.focusInput()}})}function s(c){c.playSignal(b.clear)}export{k as ACTION_ID_NEW_CHAT,K as ACTION_ID_NEW_EDIT_SESSION,st as registerNewChatActions};
