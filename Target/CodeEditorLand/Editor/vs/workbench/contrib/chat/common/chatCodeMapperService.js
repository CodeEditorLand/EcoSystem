import"../../../../base/common/cancellation.js";import{CharCode as u}from"../../../../base/common/charCode.js";import"../../../../base/common/lifecycle.js";import{ResourceMap as C}from"../../../../base/common/map.js";import{splitLinesIncludeSeparators as m}from"../../../../base/common/strings.js";import{isString as I}from"../../../../base/common/types.js";import{URI as R}from"../../../../base/common/uri.js";import{isLocation as g}from"../../../../editor/common/languages.js";import{createDecorator as M}from"../../../../platform/instantiation/common/instantiation.js";import"./chatAgents.js";import"./chatModel.js";import"./chatService.js";const z=M("codeMapperService");class G{_serviceBrand;providers=[];registerCodeMapperProvider(r,o){return this.providers.push(o),{dispose:()=>{const e=this.providers.indexOf(o);e>=0&&this.providers.splice(e,1)}}}async mapCode(r,o,e){for(const n of this.providers){const s=await n.mapCode(r,o,e);if(s)return s}}async mapCodeFromResponse(r,o,e){const n=/^`{3,}/,s=[],c=[],l=[];let d,p;for(const i of v(r))if(I(i)){const t=i.match(n);t?p!==void 0&&t[0]===p?(p=void 0,d&&(s.push({code:c.join(""),resource:d,markdownBeforeBlock:l.join("")}),c.length=0,l.length=0,d=void 0)):p=t[0]:p!==void 0?c.push(i):l.push(i)}else d=i;const f=[];for(const i of r.session.getRequests()){const t=i.response;if(!t||t===r)break;f.push({type:"request",message:i.message.text}),f.push({type:"response",message:t.response.toMarkdown(),result:t.result,references:k(t.contentReferences)})}return this.mapCode({codeBlocks:s,conversation:f},o,e)}}function v(a){return{*[Symbol.iterator](){let r;for(const o of a.response.value)if(o.kind==="markdownContent"||o.kind==="markdownVuln"){const e=m(o.content.value);if(e.length>0){r!==void 0&&(e[0]=r+e[0]),r=h(e[e.length-1])?e.pop():void 0;for(const n of e)yield n}}else o.kind==="codeblockUri"&&(yield o.uri)}}}function h(a){const r=a.charCodeAt(a.length-1);return r!==u.LineFeed&&r!==u.CarriageReturn}function k(a){const r=new C;for(const o of a){let e,n;if(R.isUri(o.reference)?e=o.reference:g(o.reference)&&(e=o.reference.uri,n=o.reference.range),e){const s=r.get(e);s?n&&s.ranges.push(n):r.set(e,{uri:e,version:-1,ranges:n?[n]:[]})}}return[...r.values()]}export{G as CodeMapperService,z as ICodeMapperService,k as getReferencesAsDocumentContext};
