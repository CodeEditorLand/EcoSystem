import{LcsDiff as k}from"../../../../../base/common/diff/diff.js";import{doHash as s,numberHash as g}from"../../../../../base/common/hash.js";import"../../../../../base/common/lifecycle.js";import{URI as h}from"../../../../../base/common/uri.js";import"../../../../../base/common/worker/simpleWorker.js";import{PieceTreeTextBufferBuilder as v}from"../../../../../editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js";import{CellKind as D,NotebookCellsChangeType as l}from"../notebookCommon.js";import{Range as N}from"../../../../../editor/common/core/range.js";import{SearchParams as _}from"../../../../../editor/common/model/textModelSearch.js";import{MirrorModel as w}from"../../../../../editor/common/services/textModelSync/textModelSync.impl.js";import{DefaultEndOfLine as f}from"../../../../../editor/common/model.js";import"../../../../../editor/common/model/mirrorTextModel.js";class M{constructor(e,t,o,a,n,m,i,r,b,c){this.handle=e;this._eol=a;this.language=m;this.cellKind=i;this.outputs=r;this.metadata=b;this.internalMetadata=c;this.textModel=new w(t,o,a,n)}textModel;_hash;get eol(){return this._eol===`\r
`?f.CRLF:f.LF}onEvents(e){this.textModel.onEvents(e),this._hash=void 0}getValue(){return this.textModel.getValue()}async getComparisonValue(){return this._hash??=this._getHash()}async _getHash(){let e=g(104579,0);e=s(this.language,e),e=s(this.getValue(),e),e=s(this.metadata,e),e=s(this.internalMetadata,e);for(const o of this.outputs){e=s(o.metadata,e);for(const a of o.outputs)e=s(a.mime,e)}const t=await Promise.all(this.outputs.flatMap(o=>o.outputs.map(a=>crypto.subtle.digest("sha-1",a.data.buffer))));for(const o of t)e=g(new Int32Array(o)[0],e);return e}}class x{constructor(e,t,o){this.uri=e;this.cells=t;this.metadata=o}acceptModelChanged(e){e.rawEvents.forEach(t=>{if(t.kind===l.ModelChange)this._spliceNotebookCells(t.changes);else if(t.kind===l.Move){const o=this.cells.splice(t.index,1);this.cells.splice(t.newIdx,0,...o)}else if(t.kind===l.Output){const o=this.cells[t.index];o.outputs=t.outputs}else if(t.kind===l.ChangeCellLanguage){this._assertIndex(t.index);const o=this.cells[t.index];o.language=t.language}else if(t.kind===l.ChangeCellMetadata){this._assertIndex(t.index);const o=this.cells[t.index];o.metadata=t.metadata}else if(t.kind===l.ChangeCellInternalMetadata){this._assertIndex(t.index);const o=this.cells[t.index];o.internalMetadata=t.internalMetadata}else t.kind===l.ChangeDocumentMetadata&&(this.metadata=t.metadata)})}_assertIndex(e){if(e<0||e>=this.cells.length)throw new Error(`Illegal index ${e}. Cells length: ${this.cells.length}`)}_spliceNotebookCells(e){e.reverse().forEach(t=>{const a=t[2].map(n=>new M(n.handle,h.parse(n.url),n.source,n.eol,n.versionId,n.language,n.cellKind,n.outputs,n.metadata));this.cells.splice(t[0],t[1],...a)})}}class d{constructor(e){this.hashValue=e}static async create(e){const t=new Int32Array(e.cells.length);return await Promise.all(e.cells.map(async(o,a)=>{t[a]=await o.getComparisonValue()})),new d(t)}getElements(){return this.hashValue}}class y{_requestHandlerBrand;_models;constructor(){this._models=Object.create(null)}dispose(){}$acceptNewModel(e,t,o){this._models[e]=new x(h.parse(e),o.map(a=>new M(a.handle,h.parse(a.url),a.source,a.eol,a.versionId,a.language,a.cellKind,a.outputs,a.metadata)),t)}$acceptModelChanged(e,t){this._models[e]?.acceptModelChanged(t)}$acceptCellModelChanged(e,t,o){this._models[e].cells.find(n=>n.handle===t)?.onEvents(o)}$acceptRemovedModel(e){this._models[e]&&delete this._models[e]}async $computeDiff(e,t){const o=this._getModel(e),a=this._getModel(t),[n,m]=await Promise.all([d.create(o),d.create(a)]),r=new k(n,m).ComputeDiff(!1);return{metadataChanged:JSON.stringify(o.metadata)!==JSON.stringify(a.metadata),cellsDiff:r}}$canPromptRecommendation(e){const o=this._getModel(e).cells;for(let a=0;a<o.length;a++){const n=o[a];if(n.cellKind===D.Markup||n.language!=="python")continue;const i=new _("import\\s*pandas|from\\s*pandas",!0,!1,null).parseSearchRequest();if(!i)continue;const r=new v;r.acceptChunk(n.getValue());const c=r.finish(!0).create(n.eol).textBuffer,C=c.getLineCount(),p=Math.min(C,20),I=new N(1,1,p,c.getLineLength(p)+1);if(c.findMatchesLineByLine(I,i,!0,1).length>0)return!0}return!1}_getModel(e){return this._models[e]}}function te(u){return new y}export{y as NotebookEditorSimpleWorker,te as create};
