var g=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=(m,o,e,r)=>{for(var t=r>1?void 0:r?p(o,e):o,i=m.length-1,n;i>=0;i--)(n=m[i])&&(t=(r?n(o,e,t):n(t))||t);return r&&t&&g(o,e,t),t},c=(m,o)=>(e,r)=>o(e,r,m);import{addDisposableListener as l}from"../../../../../base/browser/dom.js";import{combinedDisposable as I,Disposable as C,MutableDisposable as T,toDisposable as v}from"../../../../../base/common/lifecycle.js";import{localize as w}from"../../../../../nls.js";import{IConfigurationService as _}from"../../../../../platform/configuration/common/configuration.js";import{TerminalCapability as D}from"../../../../../platform/terminal/common/capabilities/capabilities.js";import{listInactiveSelectionBackground as u}from"../../../../../platform/theme/common/colorRegistry.js";import{registerColor as G,transparent as h}from"../../../../../platform/theme/common/colorUtils.js";import{PANEL_BORDER as f}from"../../../../common/theme.js";import"../../../terminal/browser/terminal.js";import{registerTerminalContribution as S}from"../../../terminal/browser/terminalExtensions.js";import"../../../terminal/browser/widgets/widgetManager.js";import"../../../terminal/common/terminal.js";import{terminalCommandGuideConfigSection as M,TerminalCommandGuideSettingId as k}from"../common/terminalCommandGuideConfiguration.js";let a=class extends C{constructor(e,r,t,i){super();this._instance=e;this._configurationService=i}static ID="terminal.highlight";static get(e){return e.getContribution(a.ID)}_xterm;_activeCommandGuide=this._register(new T);xtermOpen(e){this._xterm=e,this._refreshActivatedState(),this._register(this._configurationService.onDidChangeConfiguration(r=>{r.affectsConfiguration(k.ShowCommandGuide)&&this._refreshActivatedState()}))}_refreshActivatedState(){const e=this._xterm;if(!e)return;const r=this._configurationService.getValue(M).showCommandGuide;if(!!this._activeCommandGuide.value!==r)if(!r)this._activeCommandGuide.clear();else{const t=e.raw.element.querySelector(".xterm-screen"),i=e.raw.element.querySelector(".xterm-viewport");this._activeCommandGuide.value=I(l(t,"mousemove",n=>this._tryShowHighlight(t,e,n)),l(i,"mousemove",n=>this._tryShowHighlight(t,e,n)),l(e.raw.element,"mouseout",()=>e.markTracker.showCommandGuide(void 0)),e.raw.onData(()=>e.markTracker.showCommandGuide(void 0)),v(()=>e.markTracker.showCommandGuide(void 0)))}}_tryShowHighlight(e,r,t){const i=e.getBoundingClientRect();if(!i)return;const n=Math.floor((t.clientY-i.top)/(i.height/r.raw.rows)),s=this._instance.capabilities.get(D.CommandDetection)?.getCommandForLine(r.raw.buffer.active.viewportY+n);s&&"getOutput"in s?r.markTracker.showCommandGuide(s):r.markTracker.showCommandGuide(void 0)}};a=d([c(3,_)],a),S(a.ID,a,!1);const J=G("terminalCommandGuide.foreground",{dark:h(u,1),light:h(u,1),hcDark:f,hcLight:f},w("terminalCommandGuide.foreground","The foreground color of the terminal command guide that appears to the left of a command and its output on hover."));export{J as TERMINAL_COMMAND_GUIDE_COLOR};
